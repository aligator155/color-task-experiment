<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8">
<title>色と課題の実験</title>
<style>
  body {
    font-family: sans-serif;
    text-align: center;
    transition: background-color 0.5s, color 0.5s;
  }
  #task {
    font-size: 1.5rem;
    margin: 30px;
  }
  input, button, select {
    font-size: 1rem;
    padding: 8px;
    margin: 5px;
  }
</style>
</head>
<body>

<h2>色と課題の実験</h2>
<div id="task"></div>
<div id="input-area"></div>

<script>
// ======== 定義 ========
const COLORS = ["red", "blue", "green", "yellow", "gray"];
const MEMORY_WORDS_POOL = [ 
  ["りんご","ねこ","本","山","車","月","花","雨"],
  ["太陽","手紙","鳥","海","時計","石","木","星"],
  ["学校","鍵","窓","道","橋","紙","椅子","魚"],
  ["ペン","家","猫","雲","火","川","声","黒"],
  ["砂","雪","森","鳥","紙","箱","糸","道"]
];
const PUZZLES = [
  {q:"AとBが同じ時間に走り出した。Aは毎分50m、Bは毎分70mで走る。10分後、BはAから何m先にいる？", answer:"200"},
  {q:"ある学校で男子と女子の比は3:2。男子が30人増えると比は7:4になる。女子の人数は？", answer:"60"},
  {q:"3人の兄弟がいる。年齢は2の倍数で、それぞれ3歳差。合計年齢は30歳。長男の年齢は？", answer:"12"},
  {q:"論理パズル：もし全ての猫は動物で、全ての動物は生き物なら、全ての猫は生き物か？", answer:"はい"},
  {q:"図形：5個の正方形を一列に並べる。両端に置ける色は赤か青だけ。真ん中の3個は、すべて同じ色で、白・黄・緑 の中から1色。このとき、できるパターンの数は何通り？", answer:"12"}
];

// ======== 実験設定 ========
let participantId = prompt("参加者IDを入力してください（例: S01）");
let colorIndex = 0;
let taskIndex = 0;
let currentTaskStart;
let currentColor;
let results = [];

// ======== 課題の提示順序をランダム化 ========
const TASK_TYPES = ["calculation", "memory", "puzzle"];
shuffle(TASK_TYPES);
shuffle(COLORS);

function shuffle(arr){
  for(let i = arr.length - 1; i > 0; i--){
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
}

// ======== 実験開始 ========
startNextTask();

function startNextTask(){
  if(taskIndex >= TASK_TYPES.length){
    finishExperiment();
    return;
  }
  currentColor = COLORS[taskIndex];
  document.body.style.backgroundColor = currentColor;
  document.body.style.color = (currentColor === "yellow") ? "black" : "white";

  const taskType = TASK_TYPES[taskIndex];
  document.getElementById("input-area").innerHTML = "";
  if(taskType === "calculation") showCalculation();
  if(taskType === "memory") showMemory();
  if(taskType === "puzzle") showPuzzle();
}

function showCalculation(){
  const taskDiv = document.getElementById("task");
  const n1 = Math.floor(Math.random()*10)+1;
  const n2 = Math.floor(Math.random()*10)+1;
  taskDiv.innerText = `計算課題：${n1} + ${n2} = ?`;
  document.getElementById("input-area").innerHTML =
    `<input id="answer" type="text">
     <button onclick="submitAnswer(${n1+n2})">送信</button>`;
  currentTaskStart = performance.now();
}

function showMemory(){
  const taskDiv = document.getElementById("task");
  const words = MEMORY_WORDS_POOL[Math.floor(Math.random()*MEMORY_WORDS_POOL.length)];
  taskDiv.innerText = "記憶課題：以下の単語を覚えてください（10秒）\n" + words.join("　");
  currentTaskStart = performance.now();
  setTimeout(()=>{
    taskDiv.innerText = "覚えた単語を入力してください（スペース区切り）";
    document.getElementById("input-area").innerHTML =
      `<input id="answer" type="text" style="width:300px">
       <button onclick="submitMemory('${words.join(',')}')">送信</button>`;
  },10000);
}

function showPuzzle(){
  const taskDiv = document.getElementById("task");
  const puzzle = PUZZLES[Math.floor(Math.random()*PUZZLES.length)];
  taskDiv.innerText = puzzle.q;
  document.getElementById("input-area").innerHTML =
    `<input id="answer" type="text">
     <button onclick="submitAnswer('${puzzle.answer}')">送信</button>`;
  currentTaskStart = performance.now();
}

function submitAnswer(correct){
  const ans = document.getElementById("answer").value.trim();
  const time = (performance.now() - currentTaskStart)/1000;
  const correctFlag = (ans === String(correct)) ? 1 : 0;
  recordResult(TASK_TYPES[taskIndex], ans, correctFlag, time);
}

function submitMemory(correctList){
  const ans = document.getElementById("answer").value.trim().split(/\s+/);
  const correct = correctList.split(',');
  const hit = ans.filter(w => correct.includes(w)).length;
  const score = hit / correct.length;
  const time = (performance.now() - currentTaskStart)/1000;
  recordResult("memory", ans.join(' '), score, time);
}

function recordResult(task, ans, correctFlag, time){
  const item = {
    participantId,
    color: currentColor,
    task,
    answer: ans,
    correct: correctFlag,
    time: time.toFixed(2)
  };
  results.push(item);
  console.log(item);
  askSurvey();
}

function askSurvey(){
  document.getElementById("task").innerText = "アンケート：";
  document.getElementById("input-area").innerHTML = `
    <p>集中できたか（1〜5） <input id="focus" type="number" min="1" max="5"></p>
    <p>やりやすかったか（1〜5） <input id="ease" type="number" min="1" max="5"></p>
    <button onclick="submitSurvey()">次へ</button>`;
}

function submitSurvey(){
  const focus = document.getElementById("focus").value;
  const ease = document.getElementById("ease").value;
  Object.assign(results[results.length-1], {focus, ease});
  taskIndex++;
  startNextTask();
}

function finishExperiment(){
  document.getElementById("task").innerText = "お疲れさまでした！結果を送信中...";
  sendToSheet();
}

// ======== Google Apps Script に送信 ========
async function sendToSheet(){
  const WEB_APP_URL = "https://script.google.com/macros/s/AKfycbyanCWTtsT7WpJvsa8Z0JUNTSwn_igXNn-MtP6YScggftEhezV3cop9uQVM3z4oX4Ximw/exec"; // ←あなたのWebアプリURL
  for(const r of results){
    const payload = {
      action: "append",
      data: {
        subjectId: r.participantId,
        note: "",
        timestamp: new Date().toISOString(),
        colorIndex: COLORS.indexOf(r.color),
        colorName: r.color,
        taskType: r.task,
        changeMode: "random",
        appliedBg: r.color,
        appliedText: (r.color === "yellow" ? "black" : "white"),
        skipped: false,
        durationSec: r.time,
        results: {correctCount: r.correct, total: 1},
        subjective: {s1: r.focus, s2: r.ease}
      }
    };

    try {
      const res = await fetch(WEB_APP_URL, {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify(payload)
      });
      const json = await res.json();
      console.log("送信結果:", json);
    } catch(e){
      console.error("送信エラー:", e);
    }
  }
  document.getElementById("task").innerText = "送信完了しました！";
}
</script>
</body>
</html>

